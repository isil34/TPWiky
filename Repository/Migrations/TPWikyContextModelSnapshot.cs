// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(TPWikyContext))]
    partial class TPWikyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Auteur")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateCreation")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateModification")
                        .HasColumnType("date");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Auteur = "Yoann",
                            Contenu = "Message 1",
                            DateCreation = new DateOnly(2024, 1, 4),
                            DateModification = new DateOnly(2024, 1, 4),
                            Theme = "Roadster"
                        });
                });

            modelBuilder.Entity("Entities.Commentaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Auteur")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("DateCreation")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateModification")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Commentaires");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            Auteur = "Yoann",
                            Contenu = "Les roadsters c'est bien mais ça prend le vent !",
                            DateCreation = new DateOnly(2024, 1, 4),
                            DateModification = new DateOnly(2024, 1, 4)
                        });
                });

            modelBuilder.Entity("Entities.Commentaire", b =>
                {
                    b.HasOne("Entities.Article", "Article")
                        .WithMany("Commentaires")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Entities.Article", b =>
                {
                    b.Navigation("Commentaires");
                });
#pragma warning restore 612, 618
        }
    }
}
